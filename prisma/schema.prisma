generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  NORMAL
  BANNED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             Int            @id @default(autoincrement())
  uid            String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  username       String         @unique
  password       String
  lastLogin      DateTime?
  email          String         @unique
  avatarUrl      String
  point          Int            @default(0)
  postCount      Int            @default(0)
  commentCount   Int            @default(0)
  comments       Comment[]
  posts          Post[]
  role           UserRole       @default(USER)
  level          Int            @default(1)
  fav            Fav[]
  commentLike    Like[]
  commentDisLike DisLike[]
  status         UserStatus     @default(NORMAL)
  bannedEnd      DateTime?
  PointHistory   PointHistory[]
  SendMessage    Message[]      @relation("sendMessage")
  ReceiveMessage Message[]      @relation("receiveMessage")
  LastComment    Post[]         @relation("lastComment")
}

model Post {
  id              Int            @id @default(autoincrement())
  pid             String         @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  title           String
  content         String
  uid             String
  viewCount       Int            @default(0)
  replyCount      Int            @default(0)
  likeCount       Int            @default(0)
  disLikeCount    Int            @default(0)
  minLevel        Int            @default(1)
  comments        Comment[]
  author          User           @relation(fields: [uid], references: [uid])
  tagId           Int
  commentDisLike  DisLike[]
  commentLike     Like[]
  fav             Fav[]
  pinned          Boolean        @default(false)
  point           Int            @default(0)
  tag             Tag            @relation(fields: [tagId], references: [id])
  PointHistory    PointHistory[]
  lastCommentUser User?          @relation(name: "lastComment", fields: [lastCommentUid], references: [uid])
  lastCommentTime DateTime       @default(now())
  lastCommentUid  String?
}

model Tag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  desc  String
  count Int     @default(0)
  posts Post[]
  hot   Boolean @default(false)
}

model Comment {
  id           Int            @id @default(autoincrement())
  cid          String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  uid          String
  pid          String
  mentioned    String[]
  content      String
  post         Post           @relation(fields: [pid], references: [pid])
  author       User           @relation(fields: [uid], references: [uid])
  likes        Like[]
  dislikes     DisLike[]
  floor        Int            @default(1)
  PointHistory PointHistory[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [pid], references: [pid])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  pid       String
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [uid], references: [uid])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  uid       String
  comment   Comment  @relation(fields: [cid], references: [cid])
  cid       String
  post      Post     @relation(fields: [pid], references: [pid])
  pid       String

  @@unique([uid, cid])
}

model DisLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [uid], references: [uid])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  comment   Comment  @relation(fields: [cid], references: [cid])
  uid       String
  cid       String
  post      Post     @relation(fields: [pid], references: [pid])
  pid       String

  @@unique([uid, cid])
}

model SysConfig {
  id      Int  @id @default(autoincrement())
  content Json
}

enum PointReason {
  POST
  COMMENT
  LIKE
  DISLIKE
  SIGNIN
  PUNISH
}

model PointHistory {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  reason    PointReason
  point     Int
  user      User        @relation(fields: [uid], references: [uid])
  uid       String
  post      Post?       @relation(fields: [pid], references: [pid])
  pid       String?
  comment   Comment?    @relation(fields: [cid], references: [cid])
  cid       String?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  read      Boolean  @default(false)
  from      User?    @relation(name: "sendMessage", fields: [fromUid], references: [uid])
  to        User     @relation(name: "receiveMessage", fields: [toUid], references: [uid])
  fromUid   String?
  toUid     String
  content   String
}
